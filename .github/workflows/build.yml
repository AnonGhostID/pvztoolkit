name: build

run-name: ${{ github.event_name == 'push' && github.event.head_commit.message || format('Manual build ({0})', github.event.inputs.config || 'MinSizeRel') }}

on:
  push:
  workflow_dispatch:
    inputs:
      config:
        description: CMake configuration
        required: true
        default: MinSizeRel
        type: choice
        options:
          - MinSizeRel
          - RelWithDebInfo
          - Release
      fltk_ref:
        description: FLTK git ref (branch, tag, or commit)
        required: true
        default: branch-1.4
        type: string

env:
  BUILD_CONFIG: ${{ github.event.inputs.config || 'MinSizeRel' }}
  FLTK_REF: ${{ github.event.inputs.fltk_ref || 'branch-1.4' }}


jobs:

  windows-msvc-x86-fltk:
    name: Build FLTK Classic UI
    runs-on: windows-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute cache key
        id: cache-key
        run: |
          echo "fltk_key=${{ env.FLTK_REF }}-x86-static-${{ env.BUILD_CONFIG }}" >> "$GITHUB_OUTPUT"

      - name: Cache FLTK install
        id: cache-fltk
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/fltk-1.4.0-msvc-static-x86
          key: fltk-${{ steps.cache-key.outputs.fltk_key }}

      - name: Build FLTK (x86, static)
        if: steps.cache-fltk.outputs.cache-hit != 'true'
        run: |
          set -euo pipefail
          FLTK_INSTALL_DIR="${RUNNER_TEMP}/fltk-1.4.0-msvc-static-x86"
          git clone --depth 1 -b "${{ env.FLTK_REF }}" https://github.com/fltk/fltk.git fltk-src
          cmake -S fltk-src -B fltk-build \
            -G "Visual Studio 17 2022" -A Win32 \
            -D CMAKE_BUILD_TYPE="${{ env.BUILD_CONFIG }}" \
            -D CMAKE_INSTALL_PREFIX="${FLTK_INSTALL_DIR}" \
            -D FLTK_BUILD_EXAMPLES=OFF \
            -D FLTK_BUILD_FLTK_OPTIONS=OFF \
            -D FLTK_BUILD_FLUID=OFF \
            -D FLTK_BUILD_FORMS=OFF \
            -D FLTK_BUILD_GL=OFF \
            -D FLTK_BUILD_SHARED_LIBS=OFF \
            -D FLTK_BUILD_TEST=OFF \
            -D FLTK_GRAPHICS_GDIPLUS=ON \
            -D FLTK_MSVC_RUNTIME_DLL=OFF \
            -D FLTK_OPTION_FILESYSTEM_SUPPORT=ON \
            -D FLTK_OPTION_LARGE_FILE=ON \
            -D FLTK_OPTION_STD=OFF \
            -D FLTK_OPTION_SVG=ON \
            -D FLTK_USE_SYSTEM_LIBJPEG=OFF \
            -D FLTK_USE_SYSTEM_LIBPNG=OFF \
            -D FLTK_USE_SYSTEM_ZLIB=OFF

          cmake --build fltk-build --config "${{ env.BUILD_CONFIG }}" --target install --parallel

      - name: Resolve FLTK_DIR
        run: |
          set -euo pipefail
          FLTK_INSTALL_DIR="${RUNNER_TEMP}/fltk-1.4.0-msvc-static-x86"
          FLTK_DIR_FOUND=$(find "$FLTK_INSTALL_DIR" -name FLTKConfig.cmake -print -quit | sed 's/\\/\//g')
          if [[ -z "$FLTK_DIR_FOUND" ]]; then
            echo "FLTKConfig.cmake not found under $FLTK_INSTALL_DIR" >&2
            find "$FLTK_INSTALL_DIR" -maxdepth 4 -type d -printf '%p\n' 2>/dev/null || true
            exit 1
          fi
          echo "FLTK_DIR=$(dirname "$FLTK_DIR_FOUND")" >> "$GITHUB_ENV"
          echo "Resolved FLTK_DIR=$(dirname "$FLTK_DIR_FOUND")"

      - name: Configure pvztoolkit (FLTK)
        run: |
          set -euo pipefail
          cmake -S . -B build \
            -G "Visual Studio 17 2022" -A Win32 \
            -D CMAKE_BUILD_TYPE="${{ env.BUILD_CONFIG }}" \
            -D USE_QT_UI=OFF \
            -D FLTK_DIR="${FLTK_DIR}"

      - name: Build pvztoolkit (FLTK)
        run: cmake --build build --config "${{ env.BUILD_CONFIG }}" --parallel

      - name: Upload artifact (FLTK Classic UI)
        uses: actions/upload-artifact@v4
        with:
          name: pvztoolkit-fltk-classic-${{ env.BUILD_CONFIG }}-x86
          path: |
            build/${{ env.BUILD_CONFIG }}/pvztoolkit*.exe
            build/${{ env.BUILD_CONFIG }}/*.pdb

  windows-msvc-x86-qt:
    name: Build Qt Modern UI
    runs-on: windows-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Qt6
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.5.3'
          host: 'windows'
          target: 'desktop'
          arch: 'win32_msvc2019'
          cache: true

      - name: Configure pvztoolkit (Qt)
        run: |
          set -euo pipefail
          rm -rf build_qt
          cmake -S . -B build_qt \
            -G "Visual Studio 17 2022" -A Win32 \
            -D CMAKE_BUILD_TYPE="${{ env.BUILD_CONFIG }}" \
            -D USE_QT_UI=ON
          echo "=== CMake Cache Check ==="
          grep USE_QT_UI build_qt/CMakeCache.txt || echo "USE_QT_UI not found in cache!"

      - name: Build pvztoolkit (Qt)
        run: cmake --build build_qt --config "${{ env.BUILD_CONFIG }}" --parallel

      - name: Deploy Qt dependencies
        run: |
          set -euo pipefail
          cd "build_qt/${{ env.BUILD_CONFIG }}"
          if [[ "${{ env.BUILD_CONFIG }}" == "Debug" ]]; then
            windeployqt.exe --debug --no-translations pvztoolkit.exe
          else
            windeployqt.exe --release --no-translations pvztoolkit.exe
          fi

      - name: Upload artifact (Qt Modern UI)
        uses: actions/upload-artifact@v4
        with:
          name: pvztoolkit-qt-modern-${{ env.BUILD_CONFIG }}-x86
          path: |
            build_qt/${{ env.BUILD_CONFIG }}/pvztoolkit*.exe
            build_qt/${{ env.BUILD_CONFIG }}/*.dll
            build_qt/${{ env.BUILD_CONFIG }}/*.pdb
            build_qt/${{ env.BUILD_CONFIG }}/platforms/
            build_qt/${{ env.BUILD_CONFIG }}/styles/
